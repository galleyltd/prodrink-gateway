// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catalog/catalog-service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace prodrink.catalog {
  public static partial class CatalogService
  {
    static readonly string __ServiceName = "catalog.CatalogService";

    static readonly grpc::Marshaller<global::prodrink.catalog.DrinkRequest> __Marshaller_DrinkRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.DrinkRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.Drink> __Marshaller_Drink = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.Drink.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.DrinkPageRequest> __Marshaller_DrinkPageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.DrinkPageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.TopLevelCategoriesRequest> __Marshaller_TopLevelCategoriesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.TopLevelCategoriesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.Category> __Marshaller_Category = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.Category.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.DrinksFromCategoryRequest> __Marshaller_DrinksFromCategoryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.DrinksFromCategoryRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::prodrink.catalog.DrinkRequest, global::prodrink.catalog.Drink> __Method_getDrinkById = new grpc::Method<global::prodrink.catalog.DrinkRequest, global::prodrink.catalog.Drink>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getDrinkById",
        __Marshaller_DrinkRequest,
        __Marshaller_Drink);

    static readonly grpc::Method<global::prodrink.catalog.DrinkPageRequest, global::prodrink.catalog.Drink> __Method_getDrinksPage = new grpc::Method<global::prodrink.catalog.DrinkPageRequest, global::prodrink.catalog.Drink>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getDrinksPage",
        __Marshaller_DrinkPageRequest,
        __Marshaller_Drink);

    static readonly grpc::Method<global::prodrink.catalog.TopLevelCategoriesRequest, global::prodrink.catalog.Category> __Method_getTopLevelCategories = new grpc::Method<global::prodrink.catalog.TopLevelCategoriesRequest, global::prodrink.catalog.Category>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getTopLevelCategories",
        __Marshaller_TopLevelCategoriesRequest,
        __Marshaller_Category);

    static readonly grpc::Method<global::prodrink.catalog.DrinksFromCategoryRequest, global::prodrink.catalog.Drink> __Method_getDrinksFromCategory = new grpc::Method<global::prodrink.catalog.DrinksFromCategoryRequest, global::prodrink.catalog.Drink>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "getDrinksFromCategory",
        __Marshaller_DrinksFromCategoryRequest,
        __Marshaller_Drink);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::prodrink.catalog.CatalogServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CatalogService</summary>
    public abstract partial class CatalogServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::prodrink.catalog.Drink> getDrinkById(global::prodrink.catalog.DrinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task getDrinksPage(global::prodrink.catalog.DrinkPageRequest request, grpc::IServerStreamWriter<global::prodrink.catalog.Drink> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task getTopLevelCategories(global::prodrink.catalog.TopLevelCategoriesRequest request, grpc::IServerStreamWriter<global::prodrink.catalog.Category> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task getDrinksFromCategory(global::prodrink.catalog.DrinksFromCategoryRequest request, grpc::IServerStreamWriter<global::prodrink.catalog.Drink> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CatalogService</summary>
    public partial class CatalogServiceClient : grpc::ClientBase<CatalogServiceClient>
    {
      /// <summary>Creates a new client for CatalogService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CatalogServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CatalogService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CatalogServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CatalogServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CatalogServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::prodrink.catalog.Drink getDrinkById(global::prodrink.catalog.DrinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getDrinkById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::prodrink.catalog.Drink getDrinkById(global::prodrink.catalog.DrinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getDrinkById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::prodrink.catalog.Drink> getDrinkByIdAsync(global::prodrink.catalog.DrinkRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getDrinkByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::prodrink.catalog.Drink> getDrinkByIdAsync(global::prodrink.catalog.DrinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getDrinkById, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::prodrink.catalog.Drink> getDrinksPage(global::prodrink.catalog.DrinkPageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getDrinksPage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::prodrink.catalog.Drink> getDrinksPage(global::prodrink.catalog.DrinkPageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getDrinksPage, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::prodrink.catalog.Category> getTopLevelCategories(global::prodrink.catalog.TopLevelCategoriesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getTopLevelCategories(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::prodrink.catalog.Category> getTopLevelCategories(global::prodrink.catalog.TopLevelCategoriesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getTopLevelCategories, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::prodrink.catalog.Drink> getDrinksFromCategory(global::prodrink.catalog.DrinksFromCategoryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return getDrinksFromCategory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::prodrink.catalog.Drink> getDrinksFromCategory(global::prodrink.catalog.DrinksFromCategoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_getDrinksFromCategory, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CatalogServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CatalogServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CatalogServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getDrinkById, serviceImpl.getDrinkById)
          .AddMethod(__Method_getDrinksPage, serviceImpl.getDrinksPage)
          .AddMethod(__Method_getTopLevelCategories, serviceImpl.getTopLevelCategories)
          .AddMethod(__Method_getDrinksFromCategory, serviceImpl.getDrinksFromCategory).Build();
    }

  }
  public static partial class AdminCatalogService
  {
    static readonly string __ServiceName = "catalog.AdminCatalogService";

    static readonly grpc::Marshaller<global::prodrink.catalog.Drink> __Marshaller_Drink = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.Drink.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.DrinkCreationResponse> __Marshaller_DrinkCreationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.DrinkCreationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.DrinkUpdateRequest> __Marshaller_DrinkUpdateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.DrinkUpdateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.DrinkUpdateResponse> __Marshaller_DrinkUpdateResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.DrinkUpdateResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.DrinkDeletionRequest> __Marshaller_DrinkDeletionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.DrinkDeletionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::prodrink.catalog.DrinkDeletionResponse> __Marshaller_DrinkDeletionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::prodrink.catalog.DrinkDeletionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::prodrink.catalog.Drink, global::prodrink.catalog.DrinkCreationResponse> __Method_createDrink = new grpc::Method<global::prodrink.catalog.Drink, global::prodrink.catalog.DrinkCreationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "createDrink",
        __Marshaller_Drink,
        __Marshaller_DrinkCreationResponse);

    static readonly grpc::Method<global::prodrink.catalog.DrinkUpdateRequest, global::prodrink.catalog.DrinkUpdateResponse> __Method_updateDrink = new grpc::Method<global::prodrink.catalog.DrinkUpdateRequest, global::prodrink.catalog.DrinkUpdateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updateDrink",
        __Marshaller_DrinkUpdateRequest,
        __Marshaller_DrinkUpdateResponse);

    static readonly grpc::Method<global::prodrink.catalog.DrinkDeletionRequest, global::prodrink.catalog.DrinkDeletionResponse> __Method_deleteDrink = new grpc::Method<global::prodrink.catalog.DrinkDeletionRequest, global::prodrink.catalog.DrinkDeletionResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "deleteDrink",
        __Marshaller_DrinkDeletionRequest,
        __Marshaller_DrinkDeletionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::prodrink.catalog.CatalogServiceReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of AdminCatalogService</summary>
    public abstract partial class AdminCatalogServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::prodrink.catalog.DrinkCreationResponse> createDrink(global::prodrink.catalog.Drink request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::prodrink.catalog.DrinkUpdateResponse> updateDrink(global::prodrink.catalog.DrinkUpdateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task deleteDrink(grpc::IAsyncStreamReader<global::prodrink.catalog.DrinkDeletionRequest> requestStream, grpc::IServerStreamWriter<global::prodrink.catalog.DrinkDeletionResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AdminCatalogService</summary>
    public partial class AdminCatalogServiceClient : grpc::ClientBase<AdminCatalogServiceClient>
    {
      /// <summary>Creates a new client for AdminCatalogService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AdminCatalogServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AdminCatalogService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AdminCatalogServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AdminCatalogServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AdminCatalogServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::prodrink.catalog.DrinkCreationResponse createDrink(global::prodrink.catalog.Drink request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return createDrink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::prodrink.catalog.DrinkCreationResponse createDrink(global::prodrink.catalog.Drink request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_createDrink, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::prodrink.catalog.DrinkCreationResponse> createDrinkAsync(global::prodrink.catalog.Drink request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return createDrinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::prodrink.catalog.DrinkCreationResponse> createDrinkAsync(global::prodrink.catalog.Drink request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_createDrink, null, options, request);
      }
      public virtual global::prodrink.catalog.DrinkUpdateResponse updateDrink(global::prodrink.catalog.DrinkUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return updateDrink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::prodrink.catalog.DrinkUpdateResponse updateDrink(global::prodrink.catalog.DrinkUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updateDrink, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::prodrink.catalog.DrinkUpdateResponse> updateDrinkAsync(global::prodrink.catalog.DrinkUpdateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return updateDrinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::prodrink.catalog.DrinkUpdateResponse> updateDrinkAsync(global::prodrink.catalog.DrinkUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updateDrink, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::prodrink.catalog.DrinkDeletionRequest, global::prodrink.catalog.DrinkDeletionResponse> deleteDrink(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return deleteDrink(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::prodrink.catalog.DrinkDeletionRequest, global::prodrink.catalog.DrinkDeletionResponse> deleteDrink(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_deleteDrink, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AdminCatalogServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AdminCatalogServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AdminCatalogServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_createDrink, serviceImpl.createDrink)
          .AddMethod(__Method_updateDrink, serviceImpl.updateDrink)
          .AddMethod(__Method_deleteDrink, serviceImpl.deleteDrink).Build();
    }

  }
}
#endregion
